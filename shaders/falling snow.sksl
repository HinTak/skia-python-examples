// kind=shader
uniform float3 iResolution;      // Viewport resolution (pixels)
uniform float  iTime;            // Shader playback time (s)
uniform float4 iMouse;           // Mouse drag pos=.xy Click pos=.zw (pixels)
uniform float3 iImageResolution; // iImage1 resolution (pixels)
uniform shader iImage1;          // An input image.

// https://shaders.skia.org/?id=80c3854680c3e99d71fbe24d86185d5bb20cb047305242f9ecb5aff0f102cf73

// Source: @kamoshika_vrc https://twitter.com/kamoshika_vrc/status/1495081980278751234

const float PI2 = 6.28318530718;
float F(vec2 c){
  return fract(sin(dot(c, vec2(12.9898, 78.233))) * 43758.5453);
}

half4 main(float2 FC) {
  vec4 o;
  float t = iTime;
  vec2 r = iResolution.xy * vec2(1, -1);
  vec3 R=normalize(vec3((FC.xy*2.-r)/r.y,1));
  for(float i=0; i<100; ++i) {
    float I=floor(t/.1)+i;
    float d=(I*.1-t)/R.z;
    vec2 p=d*R.xy+vec2(sin(t+F(I.xx)*PI2)*.3+F(I.xx*.9),t+F(I.xx*.8));
    if (F(I/100+ceil(p))<.2) {
      o+=smoothstep(.1,0.,length(fract(p)-.5))*exp(-d*d*.04);
    }
  }
  return o;
}
